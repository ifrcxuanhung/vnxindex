<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Indexes_model extends CI_Model {

    public $table = 'category';
    public $category_description = 'category_description';
    private $cal_dates;

    /**     * ************************************************************* */
    /*    Name ： __construct                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ： list articles by id (if exist) and language  */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    function __construct() {
        parent::__construct();
        $data = $this->registry->get('setting');
        $this->cal_dates = str_replace(' ', '', $data['calculation_dates']);
    }

    /**     * ************************************************************* */
    /*    Name ： del_indexes                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ：   */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    function del_indexes($table) {
        $this->db->empty_table($table);
    }

    /**     * ************************************************************* */
    /*    Name ： insert_indexes                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ：   */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    function insert_indexes($table, $arr) {
        if ($table == 'idx_specs') {
            if (isset($arr['idx_code']) == TRUE && $arr['idx_code'] != '')
                $this->db->insert($table, $arr);
        }else
            $this->db->insert($table, $arr);
    }

    /**     * ************************************************************* */
    /*    Name ： update_tables                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ：   */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    function update_tables($table, $arr, $col) {
        $sql = "SELECT * FROM $table WHERE $col = '" . $arr[$col] . "'";
        $query = $this->db->query($sql);
        if ($query->num_rows() == 0) {
            $this->insert_indexes($table, $arr);
        }
        return 1;
    }

    /**     * ************************************************************* */
    /*    Name ： del_record                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ：   */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    function del_record($table, $where) {
        $this->db->delete($table, $where);
    }

    /**     * ************************************************************* */
    /*    Name ： edit_tables                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ：   */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    function edit_tables($table, $arr, $id) {
        $this->db->where('id', $id);
        $this->db->update($table, $arr);
    }

    /**     * ************************************************************* */
    /*    Name ： get_table_files                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ：   */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    function get_table_files($where = NULL) {
        if ($where != NULL) {
            $sql = "SELECT * FROM idx_files WHERE $where";
        } else {
            $sql = "SELECT * FROM idx_files";
        }
        return $this->db->query($sql)->result_array();
    }

    /**     * ************************************************************* */
    /*    Name ： exportdata                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ：   */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    function exportdata($table, $fields) {
        $sql = "SELECT $fields FROM $table ORDER BY id DESC";
        return $this->db->query($sql)->result_array();
    }

    /**     * ************************************************************* */
    /*    Name ： get_field_table                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ：   */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    function get_field_table($table) {
        $data_fiels = $this->db->query("SHOW FIELDS FROM $table")->result_array();
        $fields = NULL;
        foreach ($data_fiels as $v) {
            $fields.=$v['Field'] . chr(9);
        }
        return $fields;
    }

    /**     * ************************************************************* */
    /*    Name ： showstructure                                                */
    /* --------------------------------------------------------------- */
    /*    Description  ：   */
    /* --------------------------------------------------------------- */
    /*    Params  ：                                               */
    /* --------------------------------------------------------------- */
    /*    Return  ：                        */
    /* --------------------------------------------------------------- */
    /*    Warning ：                                                     */
    /* --------------------------------------------------------------- */
    /*    Copyright : IFRC                                         */
    /* --------------------------------------------------------------- */
    /*    M001 : New  2012.09.05 (LongNguyen)                             */
    /*     * ************************************************************** */
    // show structure
    function showstructure($table) {
        $sql = "SHOW COLUMNS FROM $table";
        return $this->db->query($sql)->result_array();
    }

    /* phần tính cho Preparation--------------------------------------------------------------------------------------- */
    /*     * ***********************************************************************************************************
     * Name         ： inportDataIdx_compositionFromIdx_compo
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：import data table idx_composition from table idx_compo
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function inportDataIdx_compositionFromIdx_compo() {
        $this->db->select('stk_code,stk_name,stk_shares_idx,stk_float_idx,stk_capp_idx,idx_code,dates');
        $data = $this->db->get('idx_compo')->result_array();
        if (is_array($data) == TRUE && count($data) > 0) {
            return $this->db->insert_batch('idx_composition', $data);
        }
        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFieldsOfIDX_compositionFromSTK_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table idx_composition set stk_curr = stk_curr,stk_mult = stk_mult in table stk_ref
     *              ：where idx_composition.stk_code = stk_ref.stk_code
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFieldsOfIDX_compositionFromSTK_ref() {
        $sql = "UPDATE idx_composition,stk_ref
                SET     idx_composition.stk_curr = stk_ref.stk_curr,
                        idx_composition.stk_mult = stk_ref.stk_mult
                        WHERE idx_composition.stk_code = stk_ref.stk_code";
        return $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFieldsIDX_compositionFromSTK_div
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table idx_composition from stk_div
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFieldsIDX_compositionFromSTK_div() {
        $sql = "UPDATE idx_composition,stk_div
                SET idx_composition.stk_dprice = stk_div.stk_divgross
                WHERE idx_composition.stk_code = stk_div.stk_code
                      AND idx_composition.dates = stk_div.exdate";
        return $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateSTK_pricesFromSEC_refMAR_refSTK_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table STK_prices from stk_ref
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateSTK_pricesFromSEC_refMAR_refSTK_ref() {
        $sql = "UPDATE stk_prices,stk_ref
                SET     stk_prices.stk_name = stk_ref.stk_name,
                        stk_prices.stk_curr = stk_ref.stk_curr,
                        stk_prices.stk_mult = stk_ref.stk_mult
                WHERE   stk_prices.stk_code = stk_ref.stk_code
                AND     stk_prices.stk_market = stk_ref.stk_market
                AND     stk_prices.stk_sector = stk_ref.stk_sector";
        return $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIDX_compositionIDX_currFromIDX_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table IDX_composition from IDX_ref
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIDX_compositionIDX_currFromIDX_ref() {
        $sql = "UPDATE idx_composition,idx_ref
                SET     idx_composition.idx_curr=idx_ref.idx_curr
                WHERE   idx_composition.idx_code = idx_ref.idx_code";
        return $this->db->query($sql);
    }

    /* end phần tính cho Preparation---------------------------------------------------------------------------------- */

    /*     * ***********************************************************************************************************
     * Name         ： setIDX_lastOnIDX_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： set idx_last và idx_mcap  và idx_dcap = 0 trước nkhi tính indexes
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function setIDX_lastOnIDX_specs() {
        $sql = "UPDATE idx_specs
         SET     idx_last=0,idx_mcap=0,`idx_dcap`=0";
        return $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateSTK_priceFromSTK_feed
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table stk_price from table stk_feed
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateSTK_priceFromSTK_feed() {
        $sql = "UPDATE stk_prices,stk_feed,stk_ref
                SET     stk_prices.dates = stk_feed.dates,
                        stk_prices.times = stk_feed.times,
                        stk_prices.stk_last = stk_feed.stk_last
                WHERE stk_prices.stk_code = stk_ref.stk_code
                AND stk_feed.ticker = stk_ref.ticker";
        return $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFieldsOfSTK_prices
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table STK_prices
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFieldsOfSTK_prices() {
        $sql = "UPDATE stk_prices set stk_prices.stk_price = stk_prices.stk_last WHERE stk_prices.stk_last <> 0";
        $this->db->query($sql);
        $sql = "UPDATE stk_prices set stk_prices.stk_price = stk_prices.stk_rlast WHERE stk_prices.stk_last = 0";
        $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIDX_compositionFromSTK_prices
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table IDX_composition from STK_prices
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIDX_compositionFromSTK_prices() {
        $sql = "UPDATE idx_composition,stk_prices
                SET idx_composition.stk_price = stk_prices.stk_price
                WHERE idx_composition.stk_code = stk_prices.stk_code";
        return $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateOfIDX_compositionFromCURR_dates
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table IDX_composition from CURR_dates
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateOfIDX_compositionFromCURR_dates() {
        $sql = "UPDATE idx_composition,cur_rates
                SET idx_composition.curr_conv = cur_rates.curr_conv
                WHERE CONCAT(idx_composition.stk_curr,idx_composition.idx_curr) = cur_rates.code";
        return $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： caculateSTK_curr_convSTK_mcap_idxOnIDX_compositon
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： calculate STK_curr_conv STK_mcap_idxOn in table IDX_compositon
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function caculateSTK_curr_convSTK_mcap_idxOnIDX_compositon() {
        $sql = "UPDATE idx_composition
                SET stk_curr_conv = stk_price * curr_conv";
        $this->db->query($sql);

        $sql = "UPDATE idx_composition
                SET stk_mcap_idx = stk_shares_idx * (stk_float_idx/100)*(stk_capp_idx/100)*(1/stk_mult)*stk_curr_conv";
        $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： caculateSTK_dcurr_convSTK_dcap_idxOnIDX_composition
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： calculate STK_dcurr_conv STK_dcap_idx in table OnIDX_composition
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function caculateSTK_dcurr_convSTK_dcap_idxOnIDX_composition() {
        $sql = "UPDATE idx_composition
                SET stk_dcurr_conv = stk_dprice * curr_conv";
        $this->db->query($sql);

        $sql = "UPDATE idx_composition
                SET stk_dcap_idx = stk_shares_idx*(stk_float_idx/100)*(stk_capp_idx/100)*(1/stk_mult)*stk_dcurr_conv";
        $this->db->query($sql);
    }

    /* TUAN ANH 14-09-2012 */
    /* Update times = now() before calculate indexes on table IDX_composition */

    /*     * ***********************************************************************************************************
     * Name         ： updateTimesOnIDX_composition
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update time  = now
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateTimesOnIDX_composition() {
        $sql = "UPDATE idx_composition
                SET times = NOW()";
        $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIDX_specsFromIDX_composition
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update IDX_specs From IDX_composition
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIDX_specsFromIDX_composition() {
        $sql = "UPDATE idx_specs,idx_composition
                SET idx_specs.dates = idx_composition.dates, idx_specs.times = idx_composition.times
                WHERE idx_specs.idx_code = idx_composition.idx_code";
        $this->db->query($sql);

        ///
        $sql = "UPDATE idx_specs,idx_composition
              SET idx_specs.idx_mcap = (SELECT SUM(idx_composition.stk_mcap_idx) FROM idx_composition where idx_composition.idx_code =idx_specs.idx_mother)/idx_specs.idx_conv,
                  idx_specs.idx_dcap = ((SELECT SUM(idx_composition.stk_dcap_idx) FROM idx_composition where idx_composition.idx_code =idx_specs.idx_mother)/ idx_specs.idx_conv)
              WHERE idx_specs.idx_mother = idx_composition.idx_code";
        $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIDX_specsFromCUR_rates
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update IDX_specs From CUR_rates
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIDX_specsFromCUR_rates() {
        $this->db->query('update `idx_specs` set `idx_conv` =0');
        $sql = "UPDATE idx_specs
                SET     idx_specs.idx_conv =1
                WHERE    idx_specs.idx_code=idx_specs.idx_mother";
        $this->db->query($sql);

        $sql = "UPDATE idx_specs CR,cur_rates
                SET         CR.`idx_conv` =cur_rates.curr_conv
                WHERE    CONCAT(CR.idx_curr,(SELECT DISTINCT idx_curr FROM (SELECT idx_curr,idx_code FROM idx_specs) as X WHERE X.idx_code=CR.idx_mother)) =cur_rates.code
                AND         CR.idx_code != CR.idx_mother";
        $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： caculateIDX_lastOnIDX_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： caculate IDX_last On IDX_specs
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function caculateIDX_lastOnIDX_specs() {
        $sql = "UPDATE     idx_specs CR
                SET         idx_last = idx_base*idx_mcap/idx_divisor
                WHERE      idx_type='P'";
        $this->db->query($sql);
//test
// tinh A

        $sql = 'UPDATE idx_specs CR SET ip_last= (SELECT idx_last FROM (SELECT idx_curr,idx_last,idx_type,idx_mother FROM idx_specs) as X
                WHERE X.idx_mother=CR.idx_mother
                AND X.idx_curr=CR.idx_curr
                AND X.idx_type="P")
                WHERE     CR.idx_type="R"';

        $this->db->query($sql);
//tinh B
        $sql = 'UPDATE idx_specs CR SET ip_plast= (SELECT idx_plast FROM (SELECT idx_curr,idx_plast,idx_type,idx_mother FROM idx_specs) as X
                WHERE X.idx_mother=CR.idx_mother
                AND X.idx_curr=CR.idx_curr
                AND X.idx_type="P")
                WHERE CR.idx_type="R"';
        $this->db->query($sql);
        /* -------------------------------------------------------------------------------------------------------------- */
        $sql = 'UPDATE     idx_specs CR
                SET         CR.idx_last = CR.idx_pclose/(SELECT idx_pclose FROM (SELECT idx_curr,idx_pclose,idx_type,idx_mother FROM idx_specs) as X
                WHERE X.idx_mother=CR.idx_mother
                AND X.idx_curr=CR.idx_curr
                AND X.idx_type="P")*((SELECT idx_last FROM (SELECT idx_curr,idx_last,idx_type,idx_mother FROM idx_specs) as Y
                WHERE Y.idx_mother=CR.idx_mother
                AND Y.idx_curr=CR.idx_curr
                AND Y.idx_type="P")+(CR.idx_base*CR.idx_dcap/CR.idx_divisor))
                WHERE     CR.idx_type="R"';
        $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： calculateIdx_dvarIdx_varRecordsOnIdx_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： IDX_Dvar Rrecords On idx_Specs and STK_wgtOn Composition
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function calculateIdx_dvarIdx_varRecordsOnIdx_specs() {
        $sql = 'UPDATE idx_specs
                SET idx_specs.idx_dvar = 100*(idx_specs.idx_last - idx_specs.idx_pclose)/idx_specs.idx_pclose';
        $this->db->query($sql);

        $sql = 'UPDATE idx_specs,idx_composition
              SET idx_specs.records  = (SELECT count(idx_composition.stk_code) FROM idx_composition where idx_code =idx_specs.idx_mother)
              WHERE idx_specs.idx_mother = idx_composition.idx_code';
        $this->db->query($sql);

        $sql = "UPDATE idx_specs
              SET idx_specs.idx_var = 100*(idx_specs.idx_last - idx_specs.idx_plast)/idx_specs.idx_plast
              WHERE idx_specs.idx_plast <> 0";
        $this->db->query($sql);
    }

    public function calculateStk_wgtOnIdx_composition() {
        $sql = 'UPDATE idx_composition CR SET CR.stk_wgt= stk_mcap_idx/(SELECT sum(stk_mcap_idx) FROM (SELECT idx_code,stk_mcap_idx FROM idx_composition) as X
                WHERE X.idx_code=CR.idx_code)*100';
        $this->db->query($sql);
    }

    /*     * **********************************************************************************************************
     * Tính Adjustment*************************************************************************************************
     * ************************************************************************************************************** */


    /*     * ***********************************************************************************************************
     * Name         ：addColumnNxt_date
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：add Column nxt_date
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.21 (LongNguyen)
     * *************************************************************************************************************** */

    public function addColumnNxt_date() {

        $sql = "UPDATE idx_composition SET nxt_date =0";
        $this->db->query($sql);

        $sql = "UPDATE idx_composition,idx_calendar
                SET nxt_date =(SELECT `value` FROM `setting` WHERE `key`='nxt_date' LIMIT 1)";
        $this->db->query($sql);
    }

    public function addFromIdx_ca() {
        $ids2 = array();
        $sql = "SELECT CONCAT(stk_code,idx_code) AS t FROM idx_composition";
        $query = $this->db->query($sql);
        $ids = $query->result_array();
        foreach ($ids as $value) {
            $ids2[] = $value['t'];
        }
        $ids = implode($ids2, "','");
        unset($ids2);
        $sql = "INSERT INTO idx_composition (stk_code,idx_code,nxt_date) SELECT idx_ca.stk_code,
                idx_ca.idx_code,idx_ca.dates
                FROM idx_ca
                    WHERE    idx_ca.intro=1
                        AND idx_ca.dates = (SELECT nxt_date FROM idx_composition LIMIT 1)
                    AND     CONCAT(idx_ca.stk_code,idx_ca.idx_code) NOT IN
                (SELECT CONCAT(idx_composition.stk_code,idx_composition.idx_code) FROM idx_composition)";
        $this->db->query($sql);

        $sql = "SELECT id FROM idx_composition where CONCAT(stk_code,idx_code) NOT IN ('{$ids}') ";
        $query = $this->db->query($sql);
        $ids = $query->result_array();
        if (is_array($ids) == TRUE && count($ids) > 0) {
            foreach ($ids as $value) {
                $ids2[] = $value['id'];
            }
            $ids = implode($ids2, "','");
            unset($ids2);
            return $ids;
        }
    }

    public function deleteRemovalFromIDX_ca() {
        $sql = "UPDATE idx_composition CR,idx_ca
                SET CR.nxt_date=0
                        WHERE    idx_ca.removal=1
                        AND idx_ca.dates = (SELECT C.nxt_date FROM (SELECT nxt_date FROM  idx_composition LIMIT 1) AS C)
                        AND     CONCAT(idx_ca.stk_code,idx_ca.idx_code) IN
                (SELECT CONCAT(R.stk_code,R.idx_code) FROM (SELECT stk_code,idx_code FROM idx_composition) AS R)";
        $this->db->query($sql);
    }

    public function copyNewShareFloatCappingPrice() {
        $sql = "UPDATE idx_composition
                SET idx_composition.nxt_shares_idx=idx_composition.stk_shares_idx,
                idx_composition.nxt_float_idx=idx_composition.stk_float_idx,
                idx_composition.nxt_capp_idx=idx_composition.stk_capp_idx,
                idx_composition.nxt_price=idx_composition.stk_price";
        $this->db->query($sql);
    }

    public function updateNewShareFloatCappingPrice() {
        $sql = "UPDATE idx_composition,idx_ca
                SET     idx_composition.new_shares=idx_ca.new_shares,
                        idx_composition.nxt_free_float=idx_ca.nxt_free_float,
                        idx_composition.nxt_capping=idx_ca.nxt_capping,
                        idx_composition.nxt_price=idx_ca.adj_close
                WHERE CONCAT(idx_ca.stk_code,idx_ca.idx_code) IN (SELECT CONCAT(R.stk_code,R.idx_code)
                FROM (SELECT stk_code,idx_code FROM idx_composition) AS R)";
        $this->db->query($sql);
    }

    public function updateFromStk_ref($id) {
        if ($id != '') {
            $sql = "UPDATE idx_composition,stk_ref
                SET     idx_composition.stk_name=stk_ref.stk_name,
                        idx_composition.stk_curr=stk_ref.stk_curr,
                        idx_composition.stk_mult=stk_ref.stk_mult
                        WHERE idx_composition.stk_code=stk_ref.stk_code
                        AND
                        idx_composition.id IN ('{$id}')";
            $this->db->query($sql);
        }
    }

    public function updateFromIdx_ref($id) {
        if ($id != '') {
            $sql = "UPDATE idx_composition,idx_ref
                    SET     idx_composition.idx_curr=idx_ref.idx_curr
                    WHERE idx_composition.idx_code=idx_ref.idx_code
                    AND idx_composition.id IN ('{$id}')";
            $this->db->query($sql);
        }
    }

    public function updateFromCurr_rates($id) { // sai
        if ($id != '') {
            $sql = "UPDATE idx_composition,cur_rates
                    SET     idx_composition.curr_conv=cur_rates.curr_conv
                    WHERE idx_composition.id IN ('{$id}')
                    AND CONCAT(idx_composition.stk_curr,idx_composition.idx_curr) =cur_rates.code";
            $this->db->query($sql);
        }
    }

    public function calculateNst_curr_convNstk_mcap_idx() {
        $sql = "UPDATE idx_composition
                SET     nstk_curr_conv=nxt_price*curr_conv,
                nstk_mcap_idx=nxt_shares_idx*(nxt_float_idx/100)*(nxt_capp_idx/100)*(1/stk_mult)*nstk_curr_conv
                WHERE nxt_date <> '0000-00-00'";
        $this->db->query($sql);
    }

    // //2.3. PREPARE TABLE IDX_SPECS
    public function empty_nxt_dateFromIdx_specs() {
        $sql = "UPDATE idx_specs SET nxt_date =0";
        $this->db->query($sql);
    }

    public function add_nxt_dateFromIdx_calendar() {
        $sql = "UPDATE idx_specs,idx_calendar
                SET nxt_date =(SELECT `value` FROM `setting` WHERE `key`='nxt_date' LIMIT 1)";
        $this->db->query($sql);
    }

    public function addIdx_specsFromIdx_ref() {
        $sql = "SELECT id FROM idx_specs";
        $query = $this->db->query($sql);
        $ids = $query->result_array();
        foreach ($ids as $value) {
            $ids2[] = $value['id'];
        }
        $ids = implode($ids2, "','");
        unset($ids2);
        $sql = "INSERT INTO idx_specs(idx_code)
                SELECT     idx_ref.idx_code
                            FROM idx_ref
                WHERE idx_ref.idx_start_date = (SELECT nxt_date FROM idx_specs LIMIT 1)";
        $this->db->query($sql);
        $sql = "SELECT id FROM idx_specs WHERE id NOT IN ('{$ids}') ";
        $query = $this->db->query($sql);
        $ids = $query->result_array();
        if (is_array($ids) == TRUE && count($ids) > 0) {
            foreach ($ids as $value) {
                $ids2[] = $value['id'];
            }
            $ids = implode($ids2, "','");
            unset($ids2);
            return $ids;
        }
    }

    public function deleteRemoval() {
        $sql = "UPDATE idx_ref,idx_specs
                SET idx_specs.nxt_date =0
                WHERE idx_ref.idx_end_date = idx_specs.nxt_date
                AND     idx_ref.idx_code=idx_specs.idx_code";
        $this->db->query($sql);
    }

    public function updateIdx_specsFromIdx_ref($id) {
        if ($id != '') {
            $sql = "UPDATE idx_specs,idx_ref
                SET     idx_specs.idx_name=idx_ref.idx_name,
            idx_specs.idx_curr=idx_ref.idx_curr,
            idx_specs.idx_base=idx_ref.idx_base,
            idx_specs.idx_type=idx_ref.idx_type,
            idx_specs.idx_mother=idx_ref.idx_mother,
            idx_specs.calculs=idx_ref.calculs,
            idx_specs.publications=idx_ref.publications,
            idx_specs.idx_bbs=idx_ref.idx_bbs,
            idx_specs.idx_last=idx_ref.idx_last,
            idx_specs.idx_divisor_nxt=idx_ref.idx_divisor_nxt
            WHERE idx_specs.idx_code=idx_ref.idx_code
            AND idx_specs.id IN ('{$id}')";
            $this->db->query($sql);
        }
    }

    public function updateFromCur_rates($id) {
        if ($id != '') {
            $sql = "UPDATE idx_specs
                    SET     idx_specs.idx_conv =1
                    WHERE    idx_specs.idx_code=idx_specs.idx_mother
                    AND idx_specs.id IN ('{$id}')";
            $this->db->query($sql);
            //////////////////////
            $sql = "UPDATE idx_specs CR,cur_rates
                    SET         CR.`idx_conv` =cur_rates.curr_conv
                    WHERE    CONCAT(CR.idx_curr,(SELECT DISTINCT idx_curr FROM (SELECT idx_curr,idx_code FROM idx_specs) as X WHERE X.idx_code=CR.idx_mother)) =cur_rates.code
                    AND         CR.idx_code != CR.idx_mother
                    AND CR.id IN ('{$id}')";
            $this->db->query($sql);
        }
    }

    public function updateTo_adjustIdx_specs() {
        $sql = "UPDATE idx_specs,idx_ca
                SET     idx_specs.to_adjust=1
                WHERE (SELECT SUM(idx_ca.to_adjust) FROM idx_ca where idx_ca.idx_code =idx_specs.idx_mother) > 0";
        $this->db->query($sql);
    }

    public function updateIdx_mcap_nxt() {
        $sql = "UPDATE idx_specs,idx_composition
                SET idx_specs.idx_mcap_nxt = (select SUM(idx_composition.nstk_mcap_idx) from idx_composition where idx_composition.idx_code=idx_specs.idx_mother)/idx_conv
                WHERE
                  idx_specs.to_adjust=1
                AND idx_specs.dates <> '0000-00-00'";
        $this->db->query($sql);
    }

    public function updateIdx_divisor_nxt() {
        $sql = "UPDATE idx_specs
                SET idx_divisor_nxt=idx_divisor*(idx_mcap_nxt/idx_mcap)
                WHERE dates <> '0000-00-00'";
        $this->db->query($sql);
    }

    public function empty_nxt_dateFromStk_prices() {
        $sql = "UPDATE stk_prices SET nxt_date=0";
        $this->db->query($sql);
    }

    public function add_Idx_pricesNxt_dateFromIdx_calendar() {
        $sql = "UPDATE stk_prices,idx_calendar
           SET nxt_date =(SELECT `value` FROM `setting` WHERE `key`='nxt_date' LIMIT 1)";
        $this->db->query($sql);
    }

    public function add_introFromIdx_composition() {
        $sql = "INSERT INTO stk_prices(stk_code)
                SELECT     idx_composition.idx_code
                FROM idx_composition
                WHERE idx_composition.nxt_date = (SELECT nxt_date FROM stk_prices LIMIT 1)
                AND  idx_composition.stk_code NOT IN (select X.stk_code FROM stk_prices X)";
        $this->db->query($sql);
    }

    public function emptystk_pricesRemoval() {
        $sql = "UPDATE stk_prices
                SET    nxt_date=0
                WHERE    stk_code NOT IN (SELECT stk_code FROM idx_composition)";
        $this->db->query($sql);
    }

    public function updateStk_pricesFromStk_ref($id) {
        $sql = "UPDATE stk_prices,stk_ref
                SET     stk_prices.stk_name=stk_ref.stk_name,
                        stk_prices.stk_market=stk_ref.stk_market,
                        stk_prices.stk_sector=stk_ref.stk_sector,
                        stk_prices.stk_curr=stk_ref.stk_curr,
                        stk_prices.stk_mult=stk_ref.stk_mult
                WHERE     stk_prices.stk_code in ('{$id}')";
        $this->db->query($sql);
    }

    public function updateStk_pricesFromStk_prices() {
        $sql = "UPDATE stk_prices
                SET     nxt_stk_rlast=stk_prices.stk_price
                WHERE stk_prices.dates <> '0000-00-00'";
        $this->db->query($sql);
    }

    public function updateStk_pricesFromIdx_ca() {
        $sql = "UPDATE stk_prices,idx_ca
                SET nxt_stk_rlast=idx_ca.adj_close
                WHERE stk_prices.nxt_date=idx_ca.dates
                AND stk_prices.stk_code=idx_ca.idx_code";
        $this->db->query($sql);
    }

    public function getCheckInDate($column, $table) {
        $this->db->distinct();
        $this->db->select($column);
        $query = $this->db->get($table);
        return $query->result_array();
    }

    public function checkin2CheckIdx_codeStk_codeCurrencies() {
        $result = array();
        $result['SETTING']['table'] = 'nxt_date';
        $result['SETTING']['statistic'] = $this->registry->setting['nxt_date'];
        $result['SETTING']['values'] = $this->registry->setting['nxt_date'];
        $result['SETTING']['statement'] = $this->registry->setting['nxt_date'] ? 'OK' : 'WARNING';

        $count_idx_specs = $this->db->count_all('idx_specs');
        $count_idx_ref = $this->db->count_all('idx_ref');
        $sql = "select idx_code from idx_specs where idx_code not in (select idx_code from idx_ref)";
        $query = $this->db->query($sql);
        $num = $query->num_rows();
        $vcode = $query->result();
        $v = array();
        if (is_array($vcode) == TRUE && count($vcode) > 0) {
            foreach ($vcode as $value) {
                $v[] = $value->idx_code;
            }
        }
        $v = implode(',', $v);

        $sql = "select idx_code from idx_compo where idx_code not in (select idx_code from idx_specs)";
        $query = $this->db->query($sql);
        $num_idx_compo_idx_code_not_in_idx_specs = $query->num_rows();
        $vidx_compo_idx_code_not_in_idx_specs = $query->result();
        $idx_compo_idx_code_not_in_idx_specs = array();
        foreach ($vidx_compo_idx_code_not_in_idx_specs as $value) {
            $idx_compo_idx_code_not_in_idx_specs[] = $value->idx_code;
        }
        $idx_compo_idx_code_not_in_idx_specs = implode(',', $idx_compo_idx_code_not_in_idx_specs);


        $sql = "select idx_code from idx_specs where idx_code  in (select idx_code from idx_compo)";
        $query = $this->db->query($sql);
        $num_idx_code_in_idx_compo = $query->num_rows();

        $sql = "SELECT distinct idx_mother FROM `idx_specs`";
        $query = $this->db->query($sql);
        $num_idx_mother_in_idx_specs = $query->num_rows();

        $result['idx_code']['table'] = 'idx_code';
        $result['idx_code']['statistic'] = "<strong>NB idx_code in idx_specs :</strong>  <br/>";
        $result['idx_code']['statistic'].= "<strong>NB idx_code in idx_ref : </strong> <br/>";
        $result['idx_code']['statistic'].= "<strong>idx_code not in idx_ref : </strong><br/>";
        $result['idx_code']['statistic'].= "<strong>idx_compo.idx_code not in idx_specs :  </strong><br/>";
        $result['idx_code']['statistic'].="<strong>number idx_code in idx_compo : </strong><br/>";
        $result['idx_code']['statistic'].="<strong>number idx_mother in idx_specs : </strong><br/>";

        $result['idx_code']['values'] = "{$count_idx_specs} <br/>";
        $result['idx_code']['values'].= "{$count_idx_ref} <br/>";
        $result['idx_code']['values'].= "{$v}<br/>";
        $result['idx_code']['values'].= "{$num_idx_compo_idx_code_not_in_idx_specs} {$idx_compo_idx_code_not_in_idx_specs}<br/>";
        $result['idx_code']['values'].="{$num_idx_code_in_idx_compo}<br/>";
        $result['idx_code']['values'].="{$num_idx_mother_in_idx_specs} <br/>";

        $result['idx_code']['statement'] = ($count_idx_specs > 0 ? 'ok' : 'warning') . '<br/>';
        $result['idx_code']['statement'].=($count_idx_ref > 0 ? 'ok' : 'warning') . '<br/>';

        //////////////////////////////////////////////////////////////
        $count_idx_compo = $this->db->count_all('idx_compo');
        $count_stk_ref = $this->db->count_all('stk_ref');
        $count_stk_prices = $this->db->count_all('stk_prices');
        $count_stk_feed = $this->db->count_all('stk_feed');
        $count_mar_ref = $this->db->count_all('mar_ref');
        $count_sec_ref = $this->db->count_all('sec_ref');
        $count_stk_div = $this->db->count_all('stk_div');


        $sql = "select stk_code from idx_compo where stk_code not in (select stk_code from stk_ref)";
        $query = $this->db->query($sql);
        $num1 = $query->num_rows();
        $vcodenum1 = $query->result();
        $vnum1 = array();
        if (is_array($vcodenum1) == TRUE && count($vcodenum1) > 0) {
            foreach ($vcodenum1 as $value) {
                $vnum1[] = $value->stk_code;
            }
        }
        $vnum1 = implode(',', $vnum1);

        $sql = "select distinct stk_code from idx_compo";
        $query = $this->db->query($sql);
        $stk_code_unique_in_idx_compo = $query->num_rows();

        $sql = "select stk_code from idx_compo where stk_code not in (select stk_code from stk_prices)";
        $query = $this->db->query($sql);
        $num2 = $query->num_rows();

        $vcodenum2 = $query->result();
        $vnum2 = array();
        if (is_array($vcodenum2) == TRUE && count($vcodenum2) > 0) {
            foreach ($vcodenum2 as $value) {
                $vnum2[] = $value->stk_code;
            }
        }
        $vnum2 = implode(',', $vnum2);

        $sql = "select stk_code from idx_compo where stk_code not in (select stk_code from stk_feed)";
        $query = $this->db->query($sql);
        $num3 = $query->num_rows();

        $vcodenum3 = $query->result();
        $vnum3 = array();
        if (is_array($vcodenum3) == TRUE && count($vcodenum3) > 0) {
            foreach ($vcodenum3 as $value) {
                $vnum3[] = $value->stk_code;
            }
        }
        $vnum3 = implode(',', $vnum3);

        $sql = "select stk_market from stk_prices where stk_market not in (select mar_code from mar_ref)";
        $query = $this->db->query($sql);
        $num4 = $query->num_rows();

        $vcodenum4 = $query->result();
        $vnum4 = array();
        if (is_array($vcodenum4) == TRUE && count($vcodenum4) > 0) {
            foreach ($vcodenum4 as $value) {
                $vnum4[] = $value->stk_market;
            }
        }
        $vnum4 = implode(',', $vnum4);

        $sql = "select stk_sector from stk_prices where stk_sector not in (select sec_code from sec_ref)";
        $query = $this->db->query($sql);
        $num5 = $query->num_rows();

        $vcodenum5 = $query->result();
        $vnum5 = array();
        if (is_array($vcodenum5) == TRUE && count($vcodenum5) > 0) {
            foreach ($vcodenum5 as $value) {
                $vnum5[] = $value->stk_sector;
            }
        }
        $vnum5 = implode(',', $vnum5);

        $sql = "select stk_code from stk_div where stk_code not in (select stk_code from idx_compo)";
        $query = $this->db->query($sql);
        $num6 = $query->num_rows();

        $vcodenum6 = $query->result();
        $vnum6 = array();
        if (is_array($vcodenum6) == TRUE && count($vcodenum6) > 0) {
            foreach ($vcodenum6 as $value) {
                $vnum6[] = $value->stk_code;
            }
        }
        $vnum6 = implode(',', $vnum6);

        $result['stk_code']['table'] = 'stk_code';
        $result['stk_code']['statistic'] = "<strong>idx_compo : </strong> <br/>";
        $result['stk_code']['statistic'].="<strong>STK_CODE UNIQUE IN IDX_COMPO : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>stk_ref : </strong> <br/>";
        $result['stk_code']['statistic'].="<strong>stk_prices :</strong>  <br/>";
        $result['stk_code']['statistic'].="<strong>stk_feed : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>mar_ref : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>sec_ref : </strong> <br/>";
        $result['stk_code']['statistic'].="<strong>stk_div : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>idx_compo.stk_code not in stk_ref : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>idx_compo.stk_code not in stk_prices :</strong><br/>";
        $result['stk_code']['statistic'].="<strong>idx_compo.stk_code not in stk_feed : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>stk_prices.stk_market not in mar_ref : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>stk_prices.stk_sector not in sec_ref : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>stk_div.stk_code not in idx_compo :</strong><br/>";


        $result['stk_code']['values'] = "{$count_idx_compo} <br/>";
        $result['stk_code']['values'].="{$stk_code_unique_in_idx_compo}<br/>";
        $result['stk_code']['values'].="{$count_stk_ref} <br/>";
        $result['stk_code']['values'].=" {$count_stk_prices} <br/>";
        $result['stk_code']['values'].="{$count_stk_feed} <br/>";
        $result['stk_code']['values'].="{$count_mar_ref} <br/>";
        $result['stk_code']['values'].="{$count_sec_ref} <br/>";
        $result['stk_code']['values'].="{$count_stk_div} <br/>";
        $result['stk_code']['values'].="{$num1} {$vnum1}<br/>";
        $result['stk_code']['values'].="{$num2} {$vnum2}<br/>";
        $result['stk_code']['values'].="{$num3} {$vnum3}<br/>";
        $result['stk_code']['values'].="{$num4} {$vnum4}<br/>";
        $result['stk_code']['values'].="{$num5} {$vnum5}<br/>";
        $result['stk_code']['values'].="{$num6} {$vnum6}<br/>";



        $result['stk_code']['statement'] = ($count_idx_compo > 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($stk_code_unique_in_idx_compo > 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($count_stk_ref > 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($count_stk_prices > 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($count_stk_feed > 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($count_mar_ref > 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($count_sec_ref > 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($count_stk_div > 0 ? 'OK' : 'WARNING') . '<br/>';

        $result['stk_code']['statement'].=($num1 == 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($num2 == 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($num3 == 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($num4 == 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($num5 == 0 ? 'OK' : 'WARNING') . '<br/>';
        $result['stk_code']['statement'].=($num6 == 0 ? 'OK' : 'WARNING') . '<br/>';


        $sql = "select stk_ref.stk_curr from stk_ref, idx_ca where idx_ca.stk_code=stk_ref.stk_code";
        $query = $this->db->query($sql);
        $v1 = $query->result();
        $sql = "select idx_ref.idx_curr from idx_ref,idx_ca where idx_ca.idx_code=idx_ref.idx_mother";
        $query = $this->db->query($sql);
        $v2 = $query->result();

        $v3 = array();
        if (is_array($v1) == TRUE && is_array($v2) == TRUE) {
            foreach ($v1 as $value1) {
                foreach ($v2 as $value2) {
                    $v3[] = $value2->idx_curr . $value1->stk_curr;
                }
            }
        }
        $v3 = array_unique($v3);
        $sql = "select `code` from cur_rates";
        $query = $this->db->query($sql);
        $vcode = $query->result();
        foreach ($vcode as $value3) {
            $v4[] = $value3->code;
        }

        if (is_array($v3) == TRUE && is_array($v4) == TRUE) {
            $v5 = array_diff($v3, $v4);
        }
        $count_v5 = count($v5);

        $sql = "SELECT DISTINCT  CONCAT(CR.idx_curr,(SELECT idx_curr FROM (SELECT idx_curr,idx_code FROM idx_specs) as X WHERE X.idx_code=CR.idx_mother)) AS `code`
FROM idx_specs CR";
        $query = $this->db->query($sql);
        $v6 = $query->result();
        $v62 = array();
        foreach ($v6 as $value3) {
            $v62[] = $value3->code;
        }
        $v6 = $v62;
        $v7 = array();
        if (is_array($v6) == TRUE && is_array($v4) == TRUE) {
            $v7 = array_diff($v6, $v4);
        }
        $count_v7 = count($v7);

        $result['currency']['table'] = 'currency';
        $result['currency']['statistic'] = "<strong>NB STK_CURR+IDX_CURR not in cur_rates :</strong> <br/>";
        $result['currency']['statistic'].="<strong>NB idx_specs.idx_curr not in cur_rates :</strong> <br/>";
        $result['currency']['values'] = "{$count_v5} " . implode(',', $v5) . " <br/>";
        $result['currency']['values'].="{$count_v7} " . implode(',', $v7) . " <br/>";
        if ($count_v5 > 0 || $count_v7 > 0) {
            $result['currency']['statement'] = 'WARNING';
        }


        $sql = "SELECT stk_code from stk_ref where stk_curr='' or stk_curr IS NULL or stk_mult='' or stk_mult IS NULL";
        $query = $this->db->query($sql);
        $numstk_codeNULL = $query->num_rows();

        $vcodestk_codeNULL = $query->result();
        $vcodestk_codeNULLs = array();
        if (is_array($vcodestk_codeNULL) == TRUE && count($vcodestk_codeNULL) > 0) {
            foreach ($vcodestk_codeNULL as $value) {
                $vcodestk_codeNULLs[] = $value->stk_code;
            }
        }
        $vcodestk_codeNULLs = implode(',', $vcodestk_codeNULLs);

        $sql = "SELECT idx_code from idx_ref where idx_curr='' or idx_curr IS NULL or idx_base='' or idx_base IS NULL";
        $query = $this->db->query($sql);
        $numidx_codeNULL = $query->num_rows();

        $vcodeidx_codeNULL = $query->result();
        $vcodeidx_codeNULLs = array();
        if (is_array($vcodeidx_codeNULL) == TRUE && count($vcodeidx_codeNULL) > 0) {
            foreach ($vcodeidx_codeNULL as $value) {
                $vcodeidx_codeNULLs[] = $value->idx_code;
            }
        }
        $vcodeidx_codeNULLs = implode(',', $vcodeidx_codeNULLs);

        $sql = "SELECT * from cur_rates where `code`='' or `code` IS NULL or `currency`='' or `currency` IS NULL or `tos`='' or `tos` IS NULL or `dates`='' or `dates` IS NULL or `times`='' or `times` IS NULL";
        $query = $this->db->query($sql);
        $numcur_ratesNULL = $query->num_rows();

        $sql = "SELECT `code` FROM `cur_rates` WHERE `curr_conv` <=0 or `curr_conv` IS NULL";
        $query = $this->db->query($sql);
        $numcurr_convNULL = $query->num_rows();

        $vcodecurr_convNULL = $query->result();
        $vcodecurr_convNULLs = array();
        if (is_array($vcodecurr_convNULL) == TRUE && count($vcodecurr_convNULL) > 0) {
            foreach ($vcodecurr_convNULL as $value) {
                $vcodecurr_convNULLs[] = $value->code;
            }
        }
        $vcodecurr_convNULLs = implode(',', $vcodecurr_convNULLs);

        $sql = "SELECT `stk_code` FROM `stk_prices` WHERE `stk_rlast` < 0 or `stk_rlast` IS NULL";
        $query = $this->db->query($sql);
        $numstk_rlastNULL = $query->num_rows();
        $vcodestk_rlastNULL = $query->result();
        $vcodestk_rlastNULLs = array();
        if (is_array($vcodestk_rlastNULL) == TRUE && count($vcodestk_rlastNULL) > 0) {
            foreach ($vcodestk_rlastNULL as $value) {
                $vcodestk_rlastNULLs[] = $value->stk_code;
            }
        }
        $vcodestk_rlastNULLs = implode(',', $vcodestk_rlastNULLs);

        $sql = "SELECT `stk_code` FROM `idx_compo` WHERE `stk_shares_idx` < 0 or `stk_shares_idx` IS NULL";
        $query = $this->db->query($sql);
        $numstk_shares_idxNULL = $query->num_rows();

        $vcodestk_shares_idxNULL = $query->result();
        $vcodestk_shares_idxNULLs = array();
        if (is_array($vcodestk_shares_idxNULL) == TRUE && count($vcodestk_shares_idxNULL) > 0) {
            foreach ($vcodestk_shares_idxNULL as $value) {
                $vcodestk_shares_idxNULLs[] = $value->stk_code;
            }
        }
        $vcodestk_shares_idxNULLs = implode(',', $vcodestk_shares_idxNULLs);

        $sql = "SELECT `stk_code` FROM `idx_compo` WHERE `stk_float_idx` < 0 or `stk_float_idx` > 100 or `stk_float_idx` IS NULL";
        $query = $this->db->query($sql);
        $numstk_float_idx = $query->num_rows();

        $vcodestk_float_idx = $query->result();
        $vcodestk_float_idxs = array();
        if (is_array($vcodestk_float_idx) == TRUE && count($vcodestk_float_idx) > 0) {
            foreach ($vcodestk_float_idx as $value) {
                $vcodestk_float_idxs[] = $value->stk_code;
            }
        }
        $vcodestk_float_idxs = implode(',', $vcodestk_float_idxs);

        $sql = "SELECT `stk_code` FROM `idx_compo` WHERE `stk_capp_idx` < 0 or `stk_capp_idx` > 100 or `stk_capp_idx` IS NULL";
        $query = $this->db->query($sql);
        $numstk_capp_idx = $query->num_rows();

        $vcodestk_capp_idx = $query->result();
        $vcodestk_capp_idxs = array();
        if (is_array($vcodestk_capp_idx) == TRUE && count($vcodestk_capp_idx) > 0) {
            foreach ($vcodestk_capp_idx as $value) {
                $vcodestk_capp_idxs[] = $value->stk_code;
            }
        }
        $vcodestk_capp_idxs = implode(',', $vcodestk_capp_idxs);

        $result['value']['table'] = 'value';

        $result['value']['statistic'] = "<strong>NB STK_REF: STK_CURR, STK_MULT  NULL : </strong><br/>";
        $result['value']['statistic'].="<strong>IDX_REF: IDX_CURR, IDX_BASE  NULL : </strong><br/>";
        $result['value']['statistic'].="<strong>CODE, CURRENCY, TOS, DATES, TIMES  NULL :</strong><br/>";
        $result['value']['statistic'].="<strong>CURR_CONV < 0 :</strong><br/>";
        $result['value']['statistic'].="<strong>STK_PRICES: STK_RLAST < 0 : </strong><br/>";
        $result['value']['statistic'].="<strong>IDX_COMPO  STK_SHARES_IDX < 0 : </strong><br/>";
        $result['value']['statistic'].="<strong>STK_FLOAT_IDX <> [0,100] :</strong><br/>";
        $result['value']['statistic'].="<strong>STK_CAPP_IDX <>  [0,100] :</strong>";


        $result['value']['values'] = "{$numstk_codeNULL} {$vcodestk_codeNULLs}<br/>";
        $result['value']['values'].="{$numidx_codeNULL} {$vcodeidx_codeNULLs}<br/>";
        $result['value']['values'].="{$numcur_ratesNULL} <br/>";
        $result['value']['values'].="{$numcurr_convNULL} {$vcodecurr_convNULLs}<br/>";
        $result['value']['values'].="{$numstk_rlastNULL} {$vcodestk_rlastNULLs}<br/>";
        $result['value']['values'].="{$numstk_shares_idxNULL} {$vcodestk_shares_idxNULLs}<br/>";
        $result['value']['values'].="{$numstk_float_idx} {$vcodestk_float_idxs}<br/>";
        $result['value']['values'].="{$numstk_capp_idx} {$vcodestk_capp_idxs}";


        $result['value']['statement'] = ($numstk_codeNULL > 0 ? 'WARNING' : 'OK') . '<br/>';
        $result['value']['statement'].=($numidx_codeNULL > 0 ? 'WARNING' : 'OK') . '<br/>';
        $result['value']['statement'].=($numcur_ratesNULL > 0 ? 'WARNING' : 'OK') . ' <br/>';
        $result['value']['statement'].=($numcurr_convNULL > 0 ? 'WARNING' : 'OK') . '<br/>';
        $result['value']['statement'].=($numstk_rlastNULL > 0 ? 'WARNING' : 'OK') . '<br/>';
        $result['value']['statement'].=($numstk_shares_idxNULL > 0 ? 'WARNING' : 'OK') . ' <br/>';
        $result['value']['statement'].=($numstk_float_idx > 0 ? 'WARNING' : 'OK') . '<br/>';
        $result['value']['statement'].=($numstk_capp_idx > 0 ? 'WARNING' : 'OK');
        return $result;
    }
    /*     * ***********************************************************************************************************
     * Name         ： vietnam - international - ifrc
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： 
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.16.14 (PhanMinh)
     * *************************************************************************************************************** */
     public function listVietNam(){
        $sSortDir = $this->input->get_post('sSortDir_0', true);
        
        
        /* Array of database columns which should be read and sent back to DataTables. Use a space where
         * you want to insert a non-database field (for example a counter or static image)
         */
         $sTable = 'idx_sample';
         
        $aColumns = array("{$sTable}.id", "{$sTable}.name", "{$sTable}.shortname", "{$sTable}.provider", "{$sTable}.place", "{$sTable}.launch", "{$sTable}.curr", "{$sTable}.calcul", "{$sTable}.frequency","{$sTable}.price","{$sTable}.base_value");
        
        $aColumns2 = array('id', 'name', 'shortname', 'provider', 'place', 'launch', 'curr', 'calcul', 'frequency', 'price','base_value');
        
        // DB table to use
        $this->db->where('place','VIETNAM');
    
        $iDisplayStart = $this->input->get_post('iDisplayStart', true);
        $iDisplayLength = $this->input->get_post('iDisplayLength', true);
        $iSortCol_0 = $this->input->get_post('iSortCol_0', true);
        $iSortingCols = $this->input->get_post('iSortingCols', true);
        $sSearch = $this->input->get_post('sSearch', true);
        $sEcho = $this->input->get_post('sEcho', true);
    
        // Paging
        if(isset($iDisplayStart) && $iDisplayLength != '-1')
        {
            $this->db->limit($this->db->escape_str($iDisplayLength), $this->db->escape_str($iDisplayStart));
        }
        
        // Ordering
        if(isset($iSortCol_0))
        {
            for($i=0; $i<intval($iSortingCols); $i++)
            {
                $iSortCol = $this->input->get_post('iSortCol_'.$i, true);
                $bSortable = $this->input->get_post('bSortable_'.intval($iSortCol), true);
                $sSortDir = $this->input->get_post('sSortDir_'.$i, true);
    
                if($bSortable == 'true')
                {
                    $this->db->order_by($aColumns[intval($this->db->escape_str($iSortCol)) + 1], $this->db->escape_str($sSortDir));
                }
            }
        }
        
        /* 
         * Filtering
         * NOTE this does not match the built-in DataTables filtering which does it
         * word by word on any field. It's possible to do here, but concerned about efficiency
         * on very large tables, and MySQL's regex functionality is very limited
         */
        if(isset($sSearch) && !empty($sSearch))
        {
            for($i=0; $i<count($aColumns); $i++)
            {
                $bSearchable = $this->input->get_post('bSearchable_'.$i, true);
                
                // Individual column filtering
                if(isset($bSearchable) && $bSearchable == 'true')
                {
                    $this->db->or_like($aColumns[$i], $this->db->escape_like_str($sSearch));
                }
            }
        }
        
        // Select Data
        $this->db->select('SQL_CALC_FOUND_ROWS '.str_replace(' , ', ' ', implode(', ', $aColumns)), false);
        $rResult = $this->db->get($sTable);
    
        // Data set length after filtering
        $this->db->select('FOUND_ROWS() AS found_rows');
        $iFilteredTotal = $this->db->get()->row()->found_rows;
    
        // Total data set length
        $iTotal = $this->db->count_all($sTable);
    
        // Output
        $output = array(
            'sEcho' => intval($sEcho),
            'iTotalRecords' => $iTotal,
            'iTotalDisplayRecords' => $iFilteredTotal,
            'aaData' => array()
        );
        
        foreach($rResult->result_array() as $aRow)
        {
            $row = array();
            
            foreach($aColumns2 as $col)
            {
                if(!in_array($col, array('id'))){
                    $value = '';
                    $value = $aRow[$col];
                    if(is_numeric($value)){
                        $value = normalFormat($value);
                    }
                    $row[] = $value;
                }
            }
            $row[] = '<a href="#" title="Edit" class="with-tip"><img src="' . base_url() . 'assets/templates/backend/images/icons/fugue/pencil.png" width="16" height="16"></a>
                      <a href="#" title="Delete" class="with-tip delete" pid=""><img src="' . base_url() . 'assets/templates/backend/images/icons/fugue/cross-circle.png" width="16" height="16"></a>';
            $output['aaData'][] = $row;
            $output['my_id'][] = $aRow['id'];
        }
        return $output;
    }
    public function listInternational(){
        $sSortDir = $this->input->get_post('sSortDir_0', true);
        
        
        /* Array of database columns which should be read and sent back to DataTables. Use a space where
         * you want to insert a non-database field (for example a counter or static image)
         */
         $sTable = 'idx_sample';
         
        $aColumns = array("{$sTable}.id", "{$sTable}.name", "{$sTable}.shortname", "{$sTable}.provider", "{$sTable}.place", "{$sTable}.launch", "{$sTable}.curr", "{$sTable}.calcul", "{$sTable}.frequency","{$sTable}.price","{$sTable}.base_value");
        
        $aColumns2 = array('id', 'name', 'shortname', 'provider', 'place', 'launch', 'curr', 'calcul', 'frequency', 'price','base_value');
        
        // DB table to use
        $this->db->where('place <>','VIETNAM');
    
        $iDisplayStart = $this->input->get_post('iDisplayStart', true);
        $iDisplayLength = $this->input->get_post('iDisplayLength', true);
        $iSortCol_0 = $this->input->get_post('iSortCol_0', true);
        $iSortingCols = $this->input->get_post('iSortingCols', true);
        $sSearch = $this->input->get_post('sSearch', true);
        $sEcho = $this->input->get_post('sEcho', true);
    
        // Paging
        if(isset($iDisplayStart) && $iDisplayLength != '-1')
        {
            $this->db->limit($this->db->escape_str($iDisplayLength), $this->db->escape_str($iDisplayStart));
        }
        
        // Ordering
        if(isset($iSortCol_0))
        {
            for($i=0; $i<intval($iSortingCols); $i++)
            {
                $iSortCol = $this->input->get_post('iSortCol_'.$i, true);
                $bSortable = $this->input->get_post('bSortable_'.intval($iSortCol), true);
                $sSortDir = $this->input->get_post('sSortDir_'.$i, true);
    
                if($bSortable == 'true')
                {
                    $this->db->order_by($aColumns[intval($this->db->escape_str($iSortCol)) + 1], $this->db->escape_str($sSortDir));
                }
            }
        }
        
        /* 
         * Filtering
         * NOTE this does not match the built-in DataTables filtering which does it
         * word by word on any field. It's possible to do here, but concerned about efficiency
         * on very large tables, and MySQL's regex functionality is very limited
         */
        if(isset($sSearch) && !empty($sSearch))
        {
            for($i=0; $i<count($aColumns); $i++)
            {
                $bSearchable = $this->input->get_post('bSearchable_'.$i, true);
                
                // Individual column filtering
                if(isset($bSearchable) && $bSearchable == 'true')
                {
                    $this->db->or_like($aColumns[$i], $this->db->escape_like_str($sSearch));
                }
            }
        }
        
        // Select Data
        $this->db->select('SQL_CALC_FOUND_ROWS '.str_replace(' , ', ' ', implode(', ', $aColumns)), false);
        $rResult = $this->db->get($sTable);
    
        // Data set length after filtering
        $this->db->select('FOUND_ROWS() AS found_rows');
        $iFilteredTotal = $this->db->get()->row()->found_rows;
    
        // Total data set length
        $iTotal = $this->db->count_all($sTable);
    
        // Output
        $output = array(
            'sEcho' => intval($sEcho),
            'iTotalRecords' => $iTotal,
            'iTotalDisplayRecords' => $iFilteredTotal,
            'aaData' => array()
        );
        
        foreach($rResult->result_array() as $aRow)
        {
            $row = array();
            
            foreach($aColumns2 as $col)
            {
                if(!in_array($col, array('id'))){
                    $value = '';
                    $value = $aRow[$col];
                    if(is_numeric($value)){
                        $value = normalFormat($value);
                    }
                    $row[] = $value;
                }
            }
            $row[] = '<a href="" title="Edit" class="with-tip"><img src="' . base_url() . 'assets/templates/backend/images/icons/fugue/pencil.png" width="16" height="16"></a>
                            <a href="#" title="Delete" class="with-tip delete" pid=""><img src="' . base_url() . 'assets/templates/backend/images/icons/fugue/cross-circle.png" width="16" height="16"></a>';
            $output['aaData'][] = $row;
            $output['my_id'][] = $aRow['id'];
        }
        return $output;
    }
    public function listIFRC(){
        $sSortDir = $this->input->get_post('sSortDir_0', true);
        
        
        /* Array of database columns which should be read and sent back to DataTables. Use a space where
         * you want to insert a non-database field (for example a counter or static image)
         */
         $sTable = 'idx_sample';
         
        $aColumns = array("{$sTable}.id", "{$sTable}.name", "{$sTable}.shortname", "{$sTable}.provider", "{$sTable}.place", "{$sTable}.launch", "{$sTable}.curr", "{$sTable}.calcul", "{$sTable}.frequency","{$sTable}.price","{$sTable}.base_value");
        
        $aColumns2 = array('id', 'name', 'shortname', 'provider', 'place', 'launch', 'curr', 'calcul', 'frequency', 'price','base_value');
        
        // DB table to use
        $this->db->where('provider','IFRC');
    
        $iDisplayStart = $this->input->get_post('iDisplayStart', true);
        $iDisplayLength = $this->input->get_post('iDisplayLength', true);
        $iSortCol_0 = $this->input->get_post('iSortCol_0', true);
        $iSortingCols = $this->input->get_post('iSortingCols', true);
        $sSearch = $this->input->get_post('sSearch', true);
        $sEcho = $this->input->get_post('sEcho', true);
    
        // Paging
        if(isset($iDisplayStart) && $iDisplayLength != '-1')
        {
            $this->db->limit($this->db->escape_str($iDisplayLength), $this->db->escape_str($iDisplayStart));
        }
        
        // Ordering
        if(isset($iSortCol_0))
        {
            for($i=0; $i<intval($iSortingCols); $i++)
            {
                $iSortCol = $this->input->get_post('iSortCol_'.$i, true);
                $bSortable = $this->input->get_post('bSortable_'.intval($iSortCol), true);
                $sSortDir = $this->input->get_post('sSortDir_'.$i, true);
    
                if($bSortable == 'true')
                {
                    $this->db->order_by($aColumns[intval($this->db->escape_str($iSortCol)) + 1], $this->db->escape_str($sSortDir));
                }
            }
        }
        
        /* 
         * Filtering
         * NOTE this does not match the built-in DataTables filtering which does it
         * word by word on any field. It's possible to do here, but concerned about efficiency
         * on very large tables, and MySQL's regex functionality is very limited
         */
        if(isset($sSearch) && !empty($sSearch))
        {
            for($i=0; $i<count($aColumns); $i++)
            {
                $bSearchable = $this->input->get_post('bSearchable_'.$i, true);
                
                // Individual column filtering
                if(isset($bSearchable) && $bSearchable == 'true')
                {
                    $this->db->or_like($aColumns[$i], $this->db->escape_like_str($sSearch));
                }
            }
        }
        
        // Select Data
        $this->db->select('SQL_CALC_FOUND_ROWS '.str_replace(' , ', ' ', implode(', ', $aColumns)), false);
        $rResult = $this->db->get($sTable);
    
        // Data set length after filtering
        $this->db->select('FOUND_ROWS() AS found_rows');
        $iFilteredTotal = $this->db->get()->row()->found_rows;
    
        // Total data set length
        $iTotal = $this->db->count_all($sTable);
    
        // Output
        $output = array(
            'sEcho' => intval($sEcho),
            'iTotalRecords' => $iTotal,
            'iTotalDisplayRecords' => $iFilteredTotal,
            'aaData' => array()
        );
        
        foreach($rResult->result_array() as $aRow)
        {
            $row = array();
            
            foreach($aColumns2 as $col)
            {
                if(!in_array($col, array('id'))){
                    $value = '';
                    $value = $aRow[$col];
                    if(is_numeric($value)){
                        $value = normalFormat($value);
                    }
                    $row[] = $value;
                }
            }
            $row[] = '<a href="" title="Edit" class="with-tip"><img src="' . base_url() . 'assets/templates/backend/images/icons/fugue/pencil.png" width="16" height="16"></a>
                            <a href="#" title="Delete" class="with-tip delete" pid=""><img src="' . base_url() . 'assets/templates/backend/images/icons/fugue/cross-circle.png" width="16" height="16"></a>';
            $output['aaData'][] = $row;
            $output['my_id'][] = $aRow['id'];
        }
        return $output;
    }
}